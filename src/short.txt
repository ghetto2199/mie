define void @mie_fp_add@bitLS(i@bitL* %pz, i@bitL* %px, i@bitL* %py, i@bitL* %pp) {
entry:
	%x = load i@bitL* %px
	%y = load i@bitL* %py
	%p = load i@bitL* %pp
	%x1 = zext i@bitL %x to i@bitLpU
	%y1 = zext i@bitL %y to i@bitLpU
	%p1 = zext i@bitL %p to i@bitLpU
	%t0 = add i@bitLpU %x1, %y1 ; x + y
	%t1 = sub i@bitLpU %t0, %p1 ; x + y - p
	%t2 = lshr i@bitLpU %t1, @bitL
	%t3 = trunc i@bitLpU %t2 to i1
	%t4 = select i1 %t3, i@bitLpU %t0, i@bitLpU %t1
	%t5 = trunc i@bitLpU %t4 to i@bitL
	store i@bitL %t5, i@bitL* %pz
	ret void
}

define internal { i@bitL, i@unitL } @mie_local_sbb@bitL(i@bitL %x, i@bitL %y) {
	%x1 = zext i@bitL %x to i@bitLpU
	%y1 = zext i@bitL %y to i@bitLpU
	%v1 = sub i@bitLpU %x1, %y1
	%v = trunc i@bitLpU %v1 to i@bitL
	%c = lshr i@bitLpU %v1, @bitL
	%c1 = trunc i@bitLpU %c to i@unitL
	%r1 = insertvalue { i@bitL, i@unitL } undef, i@bitL %v, 0
	%r2 = insertvalue { i@bitL, i@unitL } %r1, i@unitL %c1, 1
	ret { i@bitL, i@unitL } %r2
}

define void @mie_fp_sub@bitLS(i@bitL* %pz, i@bitL* %px, i@bitL* %py, i@bitL* %pp) {
	%x = load i@bitL* %px
	%y = load i@bitL* %py
	%x1 = zext i@bitL %x to i@bitLpU
	%y1 = zext i@bitL %y to i@bitLpU
	%vc = sub i@bitLpU %x1, %y1
	%v = trunc i@bitLpU %vc to i@bitL
	%c = lshr i@bitLpU %vc, $(bit+unit-1)
	%c1 = trunc i@bitLpU %c to i1
	%p = load i@bitL* %pp
	%a = select i1 %c1, i@bitL %p, i@bitL 0
	%v1 = add i@bitL %v, %a
	store i@bitL %v1, i@bitL* %pz
	ret void
}

